BotNutri v1.0 - Coleta de Feedback

üìÑ Resumo atual do BotNutri (v1.0)
üîê Acesso:

Tela de login/cadastro funcional via Supabase

ü•ó Funcionalidade:

Chatbot com ChatGPT 3.5 integrado

Gera√ß√£o de plano alimentar de 1 dia

Dieta adaptada com base nos dados e alimentos acess√≠veis

üìä Formul√°rio inclui:

Idade, peso, altura, objetivo, sexo, n√≠vel de atividade, hor√°rios

‚öôÔ∏è Falta implementar:

Separar almo√ßo e janta com refei√ß√µes diferentes

Etapa inicial de sele√ß√£o dos 10 alimentos por grupo (vegetal, prote√≠na, carboidrato)

Funcionalidade de compra/desbloqueio da dieta semanal (R$19,90)

Hist√≥rico de dietas (opcional)








Item	Status	Feedback
Tela de login simples e clara	‚úÖ / ‚ùå	-
Escolha de alimentos comuns	‚úÖ / ‚ùå	-
Formul√°rio f√°cil de preencher	‚úÖ / ‚ùå	-
Dieta personalizada fez sentido	‚úÖ / ‚ùå	-
Diferen√ßa entre almo√ßo e jantar clara	‚úÖ / ‚ùå	-
Chatbot responde bem d√∫vidas?	‚úÖ / ‚ùå	-
Design e experi√™ncia visual	‚úÖ / ‚ùå




























import React, { useState } from "react";
import { toast } from "@/components/ui/use-toast";
import { UserFormData, DietPlan as DietPlanType } from "@/types/form";
import { generateDietPlan } from "@/services/dietService";
import { useAuth } from "@/contexts/AuthContext";
import { Button } from "@/components/ui/button";

import Header from "@/components/Header";
import UserForm from "@/components/UserForm";
import DietPlan from "@/components/DietPlan";
import FullPlanOffer from "@/components/FullPlanOffer";
import NutritionChatbot from "@/components/NutritionChatbot";
import AuthForm from "@/components/AuthForm";
import FoodSelection from "@/components/FoodSelection";

const Index = () => {
  const { isAuthenticated, login } = useAuth();
  const [dietPlan, setDietPlan] = useState<DietPlanType | null>(null);
  const [showFullPlanOffer, setShowFullPlanOffer] = useState(false);
  const [showFoodSelection, setShowFoodSelection] = useState(true);
  const [selectedFoods, setSelectedFoods] = useState<{
    vegetables: string[];
    proteins: string[];
    carbs: string[];
  }>({
    vegetables: [],
    proteins: [],
    carbs: []
  });

  const handleFoodSelectionComplete = (foods: {
    vegetables: string[];
    proteins: string[];
    carbs: string[];
  }) => {
    setSelectedFoods(foods);
    setShowFoodSelection(false);
  };

  const handleFormSubmit = (data: UserFormData) => {
    try {
      // Adiciona os alimentos selecionados aos dados do usu√°rio
      const userDataWithFoods = {
        ...data,
        selectedFoods
      };
      
      // Calcular a dieta com base nos dados do usu√°rio
      const plan = generateDietPlan(userDataWithFoods);
      setDietPlan(plan);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    } catch (error) {
      toast({
        title: "Erro ao gerar dieta",
        description: "Houve um problema ao processar seus dados. Por favor, tente novamente.",
        variant: "destructive",
      });
    }
  };

  const handleRequestFullPlan = () => {
    setShowFullPlanOffer(true);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleBuyPlan = () => {
    toast({
      title: "Compra iniciada!",
      description: "Voc√™ ser√° redirecionado para a p√°gina de pagamento.",
    });
    // Aqui seria implementada a l√≥gica de redirecionamento para o checkout/pagamento
  };

  const handleAuthenticated = (userData: { name: string; email: string }) => {
    login(userData);
  };

  const handleResetFoodSelection = () => {
    setShowFoodSelection(true);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gradient-to-b from-white to-green-50">
      <Header />
      
      <main className="flex-1 container py-8 px-4">
        {!isAuthenticated ? (
          <AuthForm onAuthenticated={handleAuthenticated} />
        ) : (
          <>
            {!dietPlan && !showFullPlanOffer && showFoodSelection && (
              <FoodSelection onComplete={handleFoodSelectionComplete} />
            )}
            
            {!dietPlan && !showFullPlanOffer && !showFoodSelection && (
              <div className="max-w-4xl mx-auto">
                <div className="mb-8 text-center">
                  <h2 className="text-3xl md:text-4xl font-bold mb-4 gradient-text">
                    Monte sua dieta personalizada em segundos
                  </h2>
                  <p className="text-lg text-muted-foreground">
                    Complete o formul√°rio abaixo com suas informa√ß√µes para receber um plano alimentar adaptado para voc√™.
                  </p>
                </div>
                <div className="mb-4 text-center">
                  <Button 
                    variant="outline" 
                    onClick={handleResetFoodSelection}
                    className="text-sm"
                  >
                    ‚Üê Voltar para sele√ß√£o de alimentos
                  </Button>
                </div>
                <UserForm onSubmit={handleFormSubmit} />
              </div>
            )}
            
            {dietPlan && !showFullPlanOffer && (
              <DietPlan plan={dietPlan} onRequestFullPlan={handleRequestFullPlan} />
            )}
            
            {showFullPlanOffer && (
              <FullPlanOffer 
                onBack={() => setShowFullPlanOffer(false)}
                onBuy={handleBuyPlan}
              />
            )}
          </>
        )}
      </main>
      
      <footer className="bg-muted py-4 px-6 text-center text-sm text-muted-foreground">
        <div className="container">
          <p>¬© {new Date().getFullYear()} BotNutri - Sua Dieta Personalizada</p>
        </div>
      </footer>
      
      <NutritionChatbot />
    </div>
  );
};

export default Index;